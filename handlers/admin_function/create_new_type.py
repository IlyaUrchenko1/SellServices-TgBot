from aiogram import Router, F
from aiogram.fsm.context import FSMContext 
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.database import Database
from utils.variables import ADMIN_IDS
from keyboards.role_keyboards import admin_keyboard
import re
from typing import Dict, Any, List

router = Router(name='admin')
db = Database()

RESERVED_FIELDS = {"title", "photo", "address", "price", "district", "number_phone", "city", "house", "street"}
MAX_FIELD_NAME_LENGTH = 50
MAX_FIELD_LABEL_LENGTH = 100
MAX_FIELD_DESCRIPTION_LENGTH = 500
MAX_SELECT_OPTIONS = 20
MAX_FIELDS_PER_TYPE = 15

class CreateServiceType(StatesGroup):
    waiting_for_name = State()
    waiting_for_price_level = State()
    waiting_for_field_name = State()
    waiting_for_field_type = State() 
    waiting_for_field_label = State()
    waiting_for_field_description = State()
    waiting_for_field_required = State()
    waiting_for_select_options = State()
    waiting_for_confirmation = State()
    management = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —É—Å–ª—É–≥–∏

def get_back_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
    keyboard.row(InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    return keyboard.as_markup()

def get_fields_summary(fields: List[Dict[str, Any]]) -> str:
    if not fields:
        return "–ü–æ–ª—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    
    summary = "üìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—è:\n\n"
    for i, field in enumerate(fields, 1):
        required = "‚úÖ" if field.get("required") else "‚ùå"
        summary += f"{i}. {field.get('label', '–ë–µ–∑ –º–µ—Ç–∫–∏')} ({field.get('name')})\n"
        summary += f"   –¢–∏–ø: {field.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        summary += f"   –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: {required}\n"
        if field.get("options"):
            summary += f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(field['options'])}\n"
        if field.get("description"):
            summary += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {field.get('description')}\n"
        summary += "\n"
    return summary

def get_fields_keyboard(fields_count: int, service_type_id: int):
    keyboard = InlineKeyboardBuilder()
    if fields_count < MAX_FIELDS_PER_TYPE:
        keyboard.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ", callback_data=f"add_field_{service_type_id}"))
    if fields_count > 0:
        keyboard.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ", callback_data=f"delete_last_field_{service_type_id}"))
    keyboard.row(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="finish_editing"))
    keyboard.row(InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    return keyboard.as_markup()

def validate_field_name(name: str) -> tuple[bool, str]:
    if not name:
        return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if name in RESERVED_FIELDS:
        return False, "‚ùå –≠—Ç–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è"
    if len(name) > MAX_FIELD_NAME_LENGTH:
        return False, f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ {MAX_FIELD_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.match("^[a-z][a-z0-9_]*$", name):
        return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
    return True, ""

@router.callback_query(F.data == "create_service_type")
async def start_create_service_type(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        await state.clear()
        await state.set_state(CreateServiceType.waiting_for_name)
        await state.update_data(current_field={})
        
        await callback.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏.\n"
            "–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
            "üéØ –ü—Ä–∏–º–µ—Ä—ã:\n"
            "- –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n"
            "- –ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞\n"
            "- –§–æ—Ç–æ–≥—Ä–∞—Ñ\n\n"
            "‚ùóÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=get_back_keyboard()
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(CreateServiceType.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    try:
        name = message.text.strip()
        
        if len(name) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        if len(name) > 100:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        if db.get_service_type_by_name(name):
            await message.answer("‚ùå –¢–∏–ø —É—Å–ª—É–≥–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
            
        await state.update_data(name=name)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="–¢—ã—Å—è—á–∏ —Ä—É–±–ª–µ–π", callback_data="price_level_0"),
            InlineKeyboardButton(text="–î–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π", callback_data="price_level_1")
        )
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
        
        await state.set_state(CreateServiceType.waiting_for_price_level)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥:",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(CreateServiceType.waiting_for_price_level, F.data.startswith("price_level_"))
async def process_price_level(callback: CallbackQuery, state: FSMContext):
    try:
        price_level = int(callback.data.split("_")[2])
        data = await state.get_data()
        name = data.get("name")
        type_id = db.add_service_type(
            header=name,
            created_by_telegram_id=str(callback.from_user.id),
            price_level=price_level
        )
        
        if not type_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø —É—Å–ª—É–≥–∏")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await state.update_data(name=name, price_level=price_level, service_type_id=type_id)
        await state.set_state(CreateServiceType.management)
        
        fields = db.get_service_type_fields(type_id)
        price_str = "–î–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π" if price_level == 1 else "–¢—ã—Å—è—á–∏ —Ä—É–±–ª–µ–π"
        await callback.message.edit_text(
            f"üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–º —É—Å–ª—É–≥–∏:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: {price_str}\n\n"
            f"{get_fields_summary(fields)}",
            reply_markup=get_fields_keyboard(len(fields), type_id)
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("add_field_"))
async def start_add_field(callback: CallbackQuery, state: FSMContext):
    try:
        service_type_id = int(callback.data.split("_")[2])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏ (–∑–∞–ø—Ä–æ—Å –∏–∑ –ë–î)
        fields = db.get_service_type_fields(service_type_id)
        if len(fields) >= MAX_FIELDS_PER_TYPE:
            await callback.answer(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π ({MAX_FIELDS_PER_TYPE})", show_alert=True)
            return
        
        await state.update_data(current_field={})
        await state.set_state(CreateServiceType.waiting_for_field_name)
        await callback.message.edit_text(
            "üîë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: experience, education, skills\n\n"
            "‚ùóÔ∏è –ü–æ–ª—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:\n"
            f"{', '.join(RESERVED_FIELDS)}\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è:\n"
            "- –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _\n"
            "- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã\n"
            f"- –ù–µ –¥–ª–∏–Ω–Ω–µ–µ {MAX_FIELD_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=get_back_keyboard()
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(CreateServiceType.waiting_for_field_name)
async def process_field_name(message: Message, state: FSMContext):
    try:
        field_name = message.text.strip()
        is_valid, error_message = validate_field_name(field_name)
        
        if not is_valid:
            await message.answer(error_message)
            return
        
        data = await state.get_data()
        current_field = data.get("current_field", {})
        current_field["name"] = field_name
        await state.update_data(current_field=current_field)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–ª—è
        await state.set_state(CreateServiceType.waiting_for_field_type)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data="field_type_text"),
            InlineKeyboardButton(text="–ß–∏—Å–ª–æ", callback_data="field_type_number")
        )
        keyboard.row(
            InlineKeyboardButton(text="–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="field_type_select"),
            InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="field_type_date")
        )
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—è:",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(CreateServiceType.waiting_for_field_type, F.data.startswith("field_type_"))
async def process_field_type(callback: CallbackQuery, state: FSMContext):
    try:
        field_type = callback.data.replace("field_type_", "")
        data = await state.get_data()
        current_field = data.get("current_field", {})
        current_field["type"] = field_type
        await state.update_data(current_field=current_field)
        
        await state.set_state(CreateServiceType.waiting_for_field_label)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É –ø–æ–ª—è (—Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):",
            reply_markup=get_back_keyboard()
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(CreateServiceType.waiting_for_field_label)
async def process_field_label(message: Message, state: FSMContext):
    try:
        label = message.text.strip()
        if len(label) > MAX_FIELD_LABEL_LENGTH:
            await message.answer(f"‚ùå –ú–µ—Ç–∫–∞ –ø–æ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ {MAX_FIELD_LABEL_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        data = await state.get_data()
        current_field = data.get("current_field", {})
        current_field["label"] = label
        await state.update_data(current_field=current_field)
        
        await state.set_state(CreateServiceType.waiting_for_field_description)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):",
            reply_markup=get_back_keyboard()
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(CreateServiceType.waiting_for_field_description)
async def process_field_description(message: Message, state: FSMContext):
    try:
        description = message.text.strip()
        if description and len(description) > MAX_FIELD_DESCRIPTION_LENGTH:
            await message.answer(f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ {MAX_FIELD_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        data = await state.get_data()
        current_field = data.get("current_field", {})
        current_field["description"] = description
        await state.update_data(current_field=current_field)
        
        await state.set_state(CreateServiceType.waiting_for_field_required)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="field_required_yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="field_required_no")
        )
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
        await message.answer(
            "–ü–æ–ª–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º?",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(CreateServiceType.waiting_for_field_required, F.data.startswith("field_required_"))
async def process_field_required(callback: CallbackQuery, state: FSMContext):
    try:
        required = True if callback.data.endswith("yes") else False
        data = await state.get_data()
        current_field = data.get("current_field", {})
        current_field["required"] = required
        await state.update_data(current_field=current_field)
        
        if current_field.get("type") == "select":
            await state.set_state(CreateServiceType.waiting_for_select_options)
            await callback.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏:\n"
                f"(–ù–µ –±–æ–ª–µ–µ {MAX_SELECT_OPTIONS} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)",
                reply_markup=get_back_keyboard()
            )
        else:
            await state.set_state(CreateServiceType.waiting_for_confirmation)
            summary = (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {current_field.get('name')}\n"
                f"–ú–µ—Ç–∫–∞: {current_field.get('label')}\n"
                f"–¢–∏–ø: {current_field.get('type')}\n"
                f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: {'‚úÖ' if current_field.get('required') else '‚ùå'}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {current_field.get('description', '')}"
            )
            keyboard = InlineKeyboardBuilder()
            keyboard.row(
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_field"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_field")
            )
            keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
            await callback.message.edit_text(
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è:\n\n{summary}",
                reply_markup=keyboard.as_markup()
            )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(CreateServiceType.waiting_for_select_options)
async def process_select_options(message: Message, state: FSMContext):
    try:
        options = [opt.strip() for opt in message.text.split(",") if opt.strip()]
        if len(options) > MAX_SELECT_OPTIONS:
            await message.answer(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_SELECT_OPTIONS}")
            return
        
        data = await state.get_data()
        current_field = data.get("current_field", {})
        current_field["options"] = options
        await state.update_data(current_field=current_field)
        
        await state.set_state(CreateServiceType.waiting_for_confirmation)
        summary = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {current_field.get('name')}\n"
            f"–ú–µ—Ç–∫–∞: {current_field.get('label')}\n"
            f"–¢–∏–ø: {current_field.get('type')}\n"
            f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: {'‚úÖ' if current_field.get('required') else '‚ùå'}\n"
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(options)}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {current_field.get('description', '')}"
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_field"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_field")
        )
        keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è:\n\n{summary}",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(CreateServiceType.waiting_for_confirmation, F.data.in_(["confirm_field", "cancel_field"]))
async def process_field_confirmation(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        service_type_id = data.get("service_type_id")
        if callback.data == "confirm_field":
            current_field = data.get("current_field", {})
            fields = db.get_service_type_fields(service_type_id)
            order_position = len(fields) + 1
            db.add_service_type_field(
                service_type_id=service_type_id,
                name=current_field.get("name"),
                name_for_user=current_field.get("label"),
                field_type=current_field.get("type"),
                item_for_select=",".join(current_field.get("options", [])),
                is_required=current_field.get("required", False),
                order_position=order_position
            )
            await callback.message.edit_text("‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
        data = await state.get_data()
        service_type_id = data.get("service_type_id")
        name = data.get("name")
        price_level = data.get("price_level")
        fields = db.get_service_type_fields(service_type_id)
        price_str = "–î–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π" if price_level == 1 else "–¢—ã—Å—è—á–∏ —Ä—É–±–ª–µ–π"
        await state.update_data(current_field={})
        await state.set_state(CreateServiceType.management)
        await callback.message.answer(
            f"üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–º —É—Å–ª—É–≥–∏:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: {price_str}\n\n"
            f"{get_fields_summary(fields)}",
            reply_markup=get_fields_keyboard(len(fields), service_type_id)
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("delete_last_field_"))
async def delete_last_field(callback: CallbackQuery, state: FSMContext):
    try:
        service_type_id = int(callback.data.split("_")[2])
        fields = db.get_service_type_fields(service_type_id)
        
        if fields:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –±–∞–∑–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—è
            if db.delete_last_service_type_field(service_type_id):
                fields = db.get_service_type_fields(service_type_id)
                data = await state.get_data()
                await callback.message.edit_text(
                    f"üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–º —É—Å–ª—É–≥–∏:\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}\n"
                    f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: {'–î–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π' if data.get('price_level') == 1 else '–¢—ã—Å—è—á–∏ —Ä—É–±–ª–µ–π'}\n\n"
                    f"{get_fields_summary(fields)}",
                    reply_markup=get_fields_keyboard(len(fields), service_type_id)
                )
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ", show_alert=True)
        else:
            await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "finish_editing")
async def finish_editing(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
            reply_markup=admin_keyboard()
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "back")
async def handle_back(callback: CallbackQuery, state: FSMContext):
    try:
        current_state = await state.get_state()
        data = await state.get_data()
        service_type_id = data.get("service_type_id")
        if current_state in [CreateServiceType.waiting_for_name]:
            await state.clear()
            await callback.message.edit_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=admin_keyboard()
            )
        else:
            if service_type_id:
                name = data.get("name")
                price_level = data.get("price_level")
                fields = db.get_service_type_fields(service_type_id)
                price_str = "–î–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π" if price_level == 1 else "–¢—ã—Å—è—á–∏ —Ä—É–±–ª–µ–π"
                await state.set_state(CreateServiceType.management)
                await callback.message.edit_text(
                    f"üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–º —É—Å–ª—É–≥–∏:\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                    f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: {price_str}\n\n"
                    f"{get_fields_summary(fields)}",
                    reply_markup=get_fields_keyboard(len(fields), service_type_id)
                )
            else:
                await state.clear()
                await callback.message.edit_text(
                    "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=admin_keyboard()
                )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "admin_menu")
async def return_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.edit_text(
            "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=admin_keyboard()
        )
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
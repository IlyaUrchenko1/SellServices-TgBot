from datetime import datetime

from aiogram import Router, F, types
from aiogram.types import (
    CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Message,
    InputMediaPhoto
)
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.database import Database
from handlers.main_function.functions.create_complaints import ComplaintStates, parse_complaint_data, validate_complaint_data
import json
from typing import List, Dict, Any, Optional, Union
from urllib.parse import quote

router = Router(name='watch_handler')
db = Database()

ITEMS_PER_PAGE = 15

class SearchStates(StatesGroup):
    browsing = State()
    filtering = State()
    viewing_service = State()

def build_service_types_keyboard(page: int = 1) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —É—Å–ª—É–≥"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã —É—Å–ª—É–≥, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É)
    service_types = db.get_service_types_by_creation_date()
    if not service_types:
        return

    keyboard = InlineKeyboardBuilder()

    start_idx = (page - 1) * ITEMS_PER_PAGE
    current_page_types = service_types[start_idx:start_idx + ITEMS_PER_PAGE]

    # –ö–∞–∂–¥—ã–π —Ç–∏–ø —É—Å–ª—É–≥–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    for service_type in current_page_types:
        if service_type['is_active']:
            keyboard.row(InlineKeyboardButton(
                text=f"{service_type['header']}",
                callback_data=f"watch_type:{service_type['id']}"
            ))

    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if len(service_types) > ITEMS_PER_PAGE:
        pagination_row = []
        if page > 1:
            pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"watch_page_{page-1}"))
        if len(service_types) > start_idx + ITEMS_PER_PAGE:
            pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"watch_page_{page+1}"))
        if pagination_row:
            keyboard.row(*pagination_row)

    keyboard.row(InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="go_to_home"))

    return keyboard.as_markup()

def create_services_keyboard(services: List[Dict], page: int = 1, type_id: Optional[int] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥, –≥–¥–µ –∫–∞–∂–¥–∞—è —É—Å–ª—É–≥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
       - —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–µ
       - –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ —É—Å–ª—É–≥–∏
    """
    keyboard = InlineKeyboardBuilder()

    if not services:
        print("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç")
        keyboard.row(InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"))
        return keyboard.as_markup()

    start_idx = (page - 1) * ITEMS_PER_PAGE
    current_page_services = services[start_idx:start_idx + ITEMS_PER_PAGE]

    for service in current_page_services:
        service_info = f"{service.get('city', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')} - {service.get('price', 0)}‚ÇΩ"
        # if service.get('custom_fields'):
        #     try:
        #         custom_fields = service['custom_fields'] if isinstance(service['custom_fields'], dict) else json.loads(service['custom_fields'])
        #         for field, value in custom_fields.items():
        #             if field not in ['photo', 'adress', 'number_phone', 'price']:
        #                 service_info += f" - {value}"
        #     except (json.JSONDecodeError, TypeError):
        #         pass

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ - —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–µ, –≤—Ç–æ—Ä–∞—è - –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ —É—Å–ª—É–≥–∏.
        keyboard.row(
            InlineKeyboardButton(
                text=service_info,
                callback_data=f"service:{service['id']}"
            ),
            InlineKeyboardButton(
                text="üì∏ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ",
                callback_data=f"show_photos:{service['id']}"
            )
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–µ—Å–ª–∏ —É—Å–ª—É–≥ –±–æ–ª—å—à–µ, —á–µ–º ITEMS_PER_PAGE)
    if len(services) > ITEMS_PER_PAGE:
        pagination_row = []
        if page > 1:
            pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"services_page_{page-1}"))
        if len(services) > start_idx + ITEMS_PER_PAGE:
            pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"services_page_{page+1}"))
        if pagination_row:
            keyboard.row(*pagination_row)

    keyboard.row(
        InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="reset_filters"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_services"),
        InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
    )

    return keyboard.as_markup()

def create_service_details_keyboard(service: Dict[str, Any], seller_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥–∏ —Å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ'"""
    keyboard = InlineKeyboardBuilder()

    # –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É
    keyboard.row(
        InlineKeyboardButton(text="üìû –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"call_{service['id']}"),
        InlineKeyboardButton(text="‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ —É—Å–ª—É–≥—É", callback_data=f"create_complaint_service_{seller_id}_{service['id']}")
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    keyboard.row(
        InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_services")
    )

    return keyboard.as_markup()

def create_filter_webapp_keyboard(service_type_id: int) -> Optional[ReplyKeyboardMarkup]:
    service_type = db.get_service_type(service_type_id)
    if not service_type or "required_fields" not in service_type:
        return None

    base_url = "https://spontaneous-kashata-919d92.netlify.app/search"
    custom_fields = {}

    required_fields = service_type["required_fields"]
    if isinstance(required_fields, str):
        try:
            required_fields = json.loads(required_fields)
        except json.JSONDecodeError:
            return None

    for field_name, field_data in required_fields.items():
        if field_name in {'photo', 'number_phone', 'price'}:
            continue
        if isinstance(field_data, dict):
            description = field_data.get('description', '')
            if description:
                custom_fields[field_name] = description

    url_params = [f"{param}={quote(value)}" for param, value in custom_fields.items()]
    webapp_url = f"{base_url}?{'&'.join(url_params)}"

    keyboard = ReplyKeyboardBuilder()
    keyboard.row(
        KeyboardButton(
            text="üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
            web_app=WebAppInfo(url=webapp_url)
        )
    )
    keyboard.row(KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π üè†"))

    return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=False)

@router.message(F.text.in_(["üëÅÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏", "/search"]))
async def start_search(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —É—Å–ª—É–≥"""
    keyboard = build_service_types_keyboard()
    if not keyboard:
        await message.answer(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥"
        )
        return

    await state.set_state(SearchStates.browsing)
    await state.set_data({})
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)

@router.callback_query(SearchStates.browsing, lambda c: c.data.startswith('watch_type:'))
async def show_services_by_type(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ª—É–≥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    try:
        service_type_id = int(callback.data.split(':')[1])

        await callback.message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã¬ª –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞",
            reply_markup=create_filter_webapp_keyboard(service_type_id)
        )
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        services = db.filter_services(
            service_type_id=service_type_id,
            status='active',
            limit=100
        )

        if not services:
            await callback.message.edit_text(
                "‚ùå –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥",
                reply_markup=build_service_types_keyboard()
            )
            
            await callback.answer()
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ª—É–≥–∏ –ø–æ —Ä–∞–±–æ—á–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        current_time = datetime.now().time()
        current_weekday = str(datetime.now().isoweekday()) 
        
        available_services = []
        
        for service in services:
            try:
                seller_id = service.get('user_id')
                if not seller_id:
                    continue
                    
                seller = db.get_user(telegram_id=str(seller_id))
                if not seller:
                    continue

                user_id, telegram_id, username, phone, is_seller, full_name, work_time_start, work_time_end, work_days = seller

                if not all([work_time_start, work_time_end, work_days]):
                    available_services.append(service)
                    continue

                try:
                    if not (work_time_start and work_time_end and ':' in work_time_start and ':' in work_time_end):
                        available_services.append(service)
                        continue

                    start_time = datetime.strptime(work_time_start, '%H:%M').time()
                    end_time = datetime.strptime(work_time_end, '%H:%M').time()
                    work_days_list = work_days.split(',')
                    
                    if current_weekday in work_days_list:
                        if start_time <= end_time:
                            if start_time <= current_time <= end_time:
                                available_services.append(service)
                        else:  # –ï—Å–ª–∏ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                            if current_time >= start_time or current_time <= end_time:
                                available_services.append(service)
                except (ValueError, TypeError):
                    available_services.append(service)
                    continue
                    
            except Exception:
                continue

        if not available_services:
            await callback.message.edit_text(
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                reply_markup=build_service_types_keyboard()
            )
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            'current_type_id': service_type_id,
            'services': available_services
        })

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = create_services_keyboard(available_services, type_id=service_type_id)
        new_text = (
            f"üìã –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥: {len(available_services)}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã¬ª –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(new_text, reply_markup=keyboard)
        except Exception as e:
            if "message is not modified" not in str(e):
                await callback.message.answer(new_text, reply_markup=keyboard)

    except Exception as e:
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥",
                reply_markup=build_service_types_keyboard()
            )
        except Exception as edit_error:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥",
                reply_markup=build_service_types_keyboard()
            )
    finally:
        await callback.answer()
            

@router.callback_query(SearchStates.browsing, lambda c: c.data.startswith('service:'))
async def show_service_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    try:
        service_id = int(callback.data.split(':')[1])
        service = db.get_services(service_id=service_id)

        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        seller = db.get_user(telegram_id=service['user_id'])
        if not seller:
            await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        seller_id = seller[1]  # id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        current_time = datetime.now().time()
        current_weekday = str(datetime.now().isoweekday())  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (1-7)
        
        work_time_start = seller[5]  # work_time_start –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        work_time_end = seller[6]    # work_time_end –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        work_days = seller[7]        # work_days –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        
        if work_time_start and work_time_end and work_days:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                if not isinstance(work_time_start, str) or not isinstance(work_time_end, str):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç—ã time
                start_time = datetime.strptime(work_time_start, '%H:%M').time()
                end_time = datetime.strptime(work_time_end, '%H:%M').time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
                work_days_list = work_days.split(',') if isinstance(work_days, str) else []
                work_days_list = [day.strip() for day in work_days_list]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º
                if current_weekday not in work_days_list:
                    await callback.answer("‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å")
                    return
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                if not (start_time <= current_time <= end_time):
                    await callback.answer(
                        f"‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å {work_time_start} –¥–æ {work_time_end}"
                    )
                    return
                    
            except ValueError as e:
                #print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
                pass

        db.increment_service_views(service_id)

        details = await format_service_info(service)

        await state.set_state(SearchStates.viewing_service)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        sent_messages = []

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if service['photo_id']:
            photo_ids = service['photo_id'].split(',') if ',' in service['photo_id'] else [service['photo_id']]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            media_group = []
            for photo_id in photo_ids:
                media_group.append(InputMediaPhoto(media=photo_id))

            if media_group:
                photos_messages = await callback.message.answer_media_group(media=media_group)
                sent_messages.extend([msg.message_id for msg in photos_messages])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        details_message = await callback.message.answer(
            details,
            reply_markup=create_service_details_keyboard(service, seller_id)
        )
        sent_messages.append(details_message.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(service_messages=sent_messages)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —É—Å–ª—É–≥–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    finally:
        await callback.answer()

@router.callback_query(lambda c: c.data == "reset_filters")
async def reset_filters(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        state_data = await state.get_data()
        service_type_id = state_data.get('current_type_id')

        if service_type_id:
            services = db.filter_services(
                service_type_id=service_type_id,
                status='active'
            )
            await state.update_data(services=services)
            keyboard = create_services_keyboard(services)

            await callback.message.edit_text(
                f"üîÑ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã\nüìã –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(services)}",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                reply_markup=build_service_types_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@router.callback_query(lambda c: c.data == "refresh_services")
async def refresh_services(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥"""
    try:
        state_data = await state.get_data()
        service_type_id = state_data.get('current_type_id')
        last_filters = state_data.get('last_filters', {})

        if not service_type_id:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
            return

        services = db.filter_services(
            service_type_id=service_type_id,
            city=last_filters.get('city'),
            price_min=last_filters.get('price_min'),
            price_max=last_filters.get('price_max'),
            custom_fields=last_filters.get('custom_fields'),
            sort_by=last_filters.get('sort_by', 'created_at'),
            sort_direction=last_filters.get('sort_direction', 'DESC'),
            status='active'
        )

        await state.update_data(services=services)
        keyboard = create_services_keyboard(services)

        filter_text = ["üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω"]

        if last_filters:
            filter_text.append("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã:")
            if last_filters.get('city'):
                filter_text.append(f"üìç –ì–æ—Ä–æ–¥: {last_filters['city']}")
            if last_filters.get('price_min') or last_filters.get('price_max'):
                price_text = "üí∞ –¶–µ–Ω–∞: "
                if last_filters.get('price_min') and last_filters.get('price_max'):
                    price_text += f"–æ—Ç {last_filters['price_min']}‚ÇΩ –¥–æ {last_filters['price_max']}‚ÇΩ"
                elif last_filters.get('price_min'):
                    price_text += f"–æ—Ç {last_filters['price_min']}‚ÇΩ"
                else:
                    price_text += f"–¥–æ {last_filters['price_max']}‚ÇΩ"
                filter_text.append(price_text)
            if custom_fields := last_filters.get('custom_fields'):
                filter_text.append("üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:")
                for field, value in custom_fields.items():
                    filter_text.append(f"   ‚Ä¢ {field}: {value}")

        filter_text.append(f"üìã –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(services)}")

        await callback.message.edit_text(
            "\n".join(filter_text),
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@router.message(SearchStates.browsing, lambda message: message.web_app_data and message.web_app_data.button_text == "üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def process_filter_webapp_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        filter_data = json.loads(message.web_app_data.data)
        state_data = await state.get_data()
        service_type_id = state_data.get('current_type_id')

        if not service_type_id:
            await message.answer(
                "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥",
                reply_markup=build_service_types_keyboard()
            )
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = {
            'service_type_id': service_type_id,
            'status': 'active'
        }

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
        if city := filter_data.get('city', '').strip():
            if city != "–ù–µ —É–∫–∞–∑–∞–Ω":
                filters['city'] = city

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
        if price_str := filter_data.get('price', '').strip():
            try:
                if price_str.startswith('–¥–æ'):
                    filters['price_max'] = float(price_str.split()[1].replace('‚ÇΩ', '').replace(' ', ''))
                elif price_str.startswith('–æ—Ç'):
                    filters['price_min'] = float(price_str.split()[1].replace('‚ÇΩ', '').replace(' ', ''))
                else:
                    price_parts = price_str.split('-')
                    if len(price_parts) == 2:
                        filters['price_min'] = float(price_parts[0].replace('‚ÇΩ', '').replace(' ', ''))
                        filters['price_max'] = float(price_parts[1].replace('‚ÇΩ', '').replace(' ', ''))
            except (ValueError, IndexError):
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ü–µ–Ω—ã")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sort_by = 'created_at'
        sort_direction = 'DESC'
        
        if filter_data.get('sortOld'):
            sort_direction = 'ASC'
        elif filter_data.get('sortPopular'):
            sort_by = 'views'

        filters['sort_by'] = sort_by
        filters['sort_direction'] = sort_direction

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        custom_fields = {}
        service_type = db.get_service_type(service_type_id)
        
        if service_type and "required_fields" in service_type:
            required_fields = service_type["required_fields"]
            if isinstance(required_fields, str):
                required_fields = json.loads(required_fields)
                
            for field_name, field_value in filter_data.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if (field_name not in ['city', 'price', 'sortNew', 'sortOld', 'sortPopular'] and 
                    field_value and 
                    field_value != "–ù–µ —É–∫–∞–∑–∞–Ω" and 
                    field_value != "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
                    custom_fields[field_name] = field_value

        if custom_fields:
            filters['custom_fields'] = custom_fields

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        services = db.filter_services(**filters)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            services=services,
            last_filters={
                'city': filters.get('city'),
                'price_min': filters.get('price_min'),
                'price_max': filters.get('price_max'),
                'custom_fields': filters.get('custom_fields'),
                'sort_by': sort_by,
                'sort_direction': sort_direction
            }
        )

        if not services:
            await message.answer(
                "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞",
                reply_markup=create_filter_webapp_keyboard(service_type_id)
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filter_text = ["üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"]
        
        if filters.get('city'):
            filter_text.append(f"üìç –ì–æ—Ä–æ–¥: {filters['city']}")
            
        if filters.get('price_min') or filters.get('price_max'):
            price_text = "üí∞ –¶–µ–Ω–∞: "
            if filters.get('price_min') and filters.get('price_max'):
                price_text += f"–æ—Ç {filters['price_min']}‚ÇΩ –¥–æ {filters['price_max']}‚ÇΩ"
            elif filters.get('price_min'):
                price_text += f"–æ—Ç {filters['price_min']}‚ÇΩ"
            else:
                price_text += f"–¥–æ {filters['price_max']}‚ÇΩ"
            filter_text.append(price_text)

        if custom_fields:
            filter_text.append("üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:")
            for field, value in custom_fields.items():
                filter_text.append(f"   ‚Ä¢ {field}: {value}")

        filter_text.append(f"üìã –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(services)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        keyboard = create_services_keyboard(services)
        await message.answer(
            "\n".join(filter_text),
            reply_markup=keyboard
        )

    except json.JSONDecodeError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=create_filter_webapp_keyboard(service_type_id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞",
            reply_markup=create_filter_webapp_keyboard(service_type_id)
        )

@router.callback_query(lambda c: c.data.startswith('call_'))
async def handle_call_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —É—Å–ª—É–≥–∏ –∏–∑ callback data
        service_id = int(callback.data.split('_')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        service = db.get_services(service_id=service_id)
        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        user_id = service.get('user_id')
        seller = db.get_user(telegram_id=user_id)
        if not seller:
            await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —É—Å–ª—É–≥–∏
        # if str(callback.from_user.id) == str(user_id):
        #     await callback.answer("‚ùå –≠—Ç–æ –≤–∞—à–∞ —É—Å–ª—É–≥–∞", show_alert=True)
        #     return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        number_phone = service.get('number_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        if not number_phone:
            await callback.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏", callback_data=f"call_{service_id}"),
            InlineKeyboardButton(text="‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{service_id}")
        )
        keyboard.row(
            InlineKeyboardButton(
                text="‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ —É—Å–ª—É–≥—É", 
                callback_data=f"create_complaint_service_{user_id}_{service_id}"
            )
        )
        keyboard.row(
            InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_services")
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        current_markup = callback.message.reply_markup
        new_markup = keyboard.as_markup()
        
        if str(current_markup) != str(new_markup):
            await callback.message.edit_reply_markup(reply_markup=new_markup)
            
        await callback.message.answer(
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: {number_phone}",
            show_alert=True
        )

    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Å–ª—É–≥–∏", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", 
            show_alert=True
        )

@router.callback_query(lambda c: c.data.startswith('book_'))
async def handle_book_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"""
    try:
        service_id = int(callback.data.split('_')[1])
        service = db.get_services(service_id=service_id)

        if not service or not isinstance(service, dict):
            print(f"–£—Å–ª—É–≥–∞ {service_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        user_id = service.get('user_id')
        if not user_id:
            print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∏ {service_id}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —É—Å–ª—É–≥–∏
        # if str(callback.from_user.id) == str(user_id):
        #     await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É")
        #     return

        owner = db.get_user(telegram_id=user_id)
        if not owner or not isinstance(owner, tuple):
            print(f"–í–ª–∞–¥–µ–ª–µ—Ü —É—Å–ª—É–≥–∏ {service_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ - –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ª—É–≥–∏ –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if service.get('status') == 'booked':
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞")
            return

        db.update_service_status(service_id, 'booked')

        owner_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_book_{service_id}"),
                InlineKeyboardButton(text="‚ö†Ô∏è –ñ–∞–ª–æ–±–∞", callback_data=f"create_complaint_user_{user_id}")
            ]
        ])

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∏
        title = service.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        price = service.get('price', 0)
        
        try:
            price_formatted = "{:,}".format(int(float(price))).replace(',', ' ')
        except (ValueError, TypeError):
            price_formatted = "0"

        username = callback.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        await callback.bot.send_message(
            chat_id=owner[1],  # telegram_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text=(
                f"üîî –í–∞—à–∞ —É—Å–ª—É–≥–∞ –±—ã–ª–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"üìù –£—Å–ª—É–≥–∞: {title}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_formatted}‚ÇΩ\n\n"
                "‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–≤—è–∑–∞–ª–∏—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            ),
            reply_markup=owner_keyboard
        )

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.reply(
            "‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            "‚ÑπÔ∏è –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "üìû –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        )

    except ValueError as ve:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {ve}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
    finally:
        await callback.answer()

@router.callback_query(lambda c: c.data.startswith('cancel_book_'))
async def handle_cancel_book_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å callback –¥–∞–Ω–Ω—ã—Ö
        callback_parts = callback.data.split('_')
        if len(callback_parts) != 3:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        try:
            service_id = int(callback_parts[2])
        except ValueError:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Å–ª—É–≥–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        service = db.get_services(service_id=service_id)
        if not service:
            print(f"–£—Å–ª—É–≥–∞ {service_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏")
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞
        if service[11] != 'booked':  # status field
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏
        if str(callback.from_user.id) != str(service[1]):  # user_id field
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–π –±—Ä–æ–Ω–∏", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ª—É–≥–∏
        try:
            db.update_service_status(service_id, 'active')
        except Exception as db_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª—É–≥–∏: {db_error}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ —É—Å–ª—É–≥—É
        booked_user = db.get_user(user_id=service[1])
        if booked_user and booked_user[1]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telegram_id
            try:
                await callback.bot.send_message(
                    chat_id=booked_user[1],
                    text=(
                        f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ ¬´{service[3]}¬ª –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.\n"
                        f"‚ÑπÔ∏è –£—Å–ª—É–≥–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
                    )
                )
            except Exception as msg_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {msg_error}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.answer("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ", show_alert=True)
        except Exception as edit_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", 
            show_alert=True
        )

@router.callback_query(lambda c: c.data == "back_to_services")
async def back_to_services(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥"""
    try:
        state_data = await state.get_data()
        services = state_data.get('services', [])
        service_messages = state_data.get('service_messages', [])
        current_page = state_data.get('current_page', 1)

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
        for message_id in service_messages:
            try:
                await callback.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=message_id
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(service_messages=[])

        if services:
            await state.set_state(SearchStates.browsing)
            keyboard = create_services_keyboard(services, page=current_page)

            new_message = await callback.message.answer(
                f"üìã –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(services)}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã¬ª –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞",
                reply_markup=keyboard
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(current_message_id=new_message.message_id)
        else:
            print("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥",
                reply_markup=build_service_types_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥",
            reply_markup=build_service_types_keyboard()
        )
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@router.callback_query(SearchStates.browsing, lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        await state.set_data({})
        keyboard = build_service_types_keyboard()
        
        await callback.message.delete()
        await callback.message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@router.callback_query(SearchStates.browsing, lambda c: c.data.startswith('watch_page_'))
async def handle_category_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        page = int(callback.data.split('_')[2])
        keyboard = build_service_types_keyboard(page)
        
        if keyboard:
            try:
                await callback.message.edit_reply_markup(reply_markup=keyboard)
            except Exception as e:
                if "message is not modified" not in str(e):
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
                    raise
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                reply_markup=types.ReplyKeyboardRemove()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    finally:
        await callback.answer()

@router.callback_query(lambda c: c.data.startswith("show_photos:"))
async def handle_show_photos(callback: CallbackQuery, state: FSMContext):
    try:
        service_id = int(callback.data.split(':')[1])
        service = db.get_services(service_id=service_id)

        if not service:
            await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        if not service.get('photo_id'):
            await callback.answer("‚ùå –£ —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", show_alert=True)
            return

        photo_ids = [pid.strip() for pid in service['photo_id'].split(',') if pid.strip()]
        if not photo_ids:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", show_alert=True)
            return

        try:
            await callback.answer("‚åõ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...", show_alert=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            state_data = await state.get_data()
            service_messages = state_data.get('service_messages', [])
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for message_id in service_messages:
                try:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=message_id
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            service_messages = []
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–µ"
            keyboard = InlineKeyboardBuilder()
            keyboard.row(InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥",
                callback_data=f"back_to_services"
            ))

            try:
                await callback.message.delete()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            if len(photo_ids) == 1:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ
                sent_message = await callback.message.answer_photo(
                    photo=photo_ids[0],
                    caption="üì∏ –§–æ—Ç–æ —É—Å–ª—É–≥–∏",
                    reply_markup=keyboard.as_markup()
                )
                service_messages.append(sent_message.message_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ
                media_group = []
                for i, photo_id in enumerate(photo_ids):
                    media = InputMediaPhoto(
                        media=photo_id,
                        caption=f"üì∏ –§–æ—Ç–æ {i+1}/{len(photo_ids)}" if i == 0 else None
                    )
                    media_group.append(media)
                
                sent_messages = await callback.message.answer_media_group(media=media_group)
                service_messages.extend([msg.message_id for msg in sent_messages])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                nav_message = await callback.message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥",
                    reply_markup=keyboard.as_markup()
                )
                service_messages.append(nav_message.message_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
            await state.update_data(service_messages=service_messages)

        except Exception as media_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {media_error}")
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", 
                show_alert=True
            )
            return

    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Å–ª—É–≥–∏", show_alert=True)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
            show_alert=True
        )

async def format_service_info(service: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
        service_type_fields = db.get_service_type_fields(service['service_type_id'])
        if not service_type_fields:
            print(f"–ü–æ–ª—è —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {service['service_type_id']}")
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π —É—Å–ª—É–≥–∏"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        address_parts = []
        for field, prefix in {
            'city': '–≥. ',
            'district': '',
            'street': '—É–ª. ',
            'house': '–¥. '
        }.items():
            if service.get(field):
                address_parts.append(f"{prefix}{service[field]}")
        
        address_str = ", ".join(filter(None, address_parts))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
        try:
            price = "{:,}".format(int(float(service.get('price', 0)))).replace(',', ' ')
        except (ValueError, TypeError):
            price = "0"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_emoji = "üü¢" if service.get('status') == 'active' else "üî¥"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_at = service.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        if isinstance(created_at, str):
            try:
                dt = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
                created_at = dt.strftime('%d.%m.%Y %H:%M')
            except ValueError:
                pass

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        caption = (
            f"{status_emoji} {service.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìç {address_str}\n"
            f"üí∞ {price}‚ÇΩ\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {service.get('views', 0)}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Ö —Ç–∏–ø–æ–º –∏ –ø–æ—Ä—è–¥–∫–æ–º
        custom_fields = service.get('custom_fields', {})
        if isinstance(custom_fields, dict):
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ order_position
            sorted_fields = sorted(service_type_fields, key=lambda x: x['order_position'])
            
            for field in sorted_fields:
                field_name = field['name']
                field_value = custom_fields.get(field_name)
                
                if field_value:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
                    if field['field_type'] == 'select' and field['item_for_select']:
                        options = field['item_for_select'].split(',')
                        try:
                            field_value = options[int(field_value)]
                        except (ValueError, IndexError):
                            pass
                    elif field['field_type'] == 'multiselect' and field['item_for_select']:
                        options = field['item_for_select'].split(',')
                        try:
                            selected = [options[int(i)] for i in field_value.split(',')]
                            field_value = ', '.join(selected)
                        except (ValueError, IndexError):
                            pass
                            
                    caption += f"üìå {field['name_for_user']}: {field_value}\n"

        return caption

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        return "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

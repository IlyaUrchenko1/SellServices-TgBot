from aiogram import Router, F
from aiogram.types import Message, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
from utils.database import Database
from keyboards.role_keyboards import seller_keyboard
from keyboards.main_keyboards import to_home_keyboard
from urllib.parse import quote, unquote
from typing import Dict, Any, Optional
import asyncio
from utils.variables import ADMIN_IDS

router = Router(name='post_handler')
db = Database()

ITEMS_PER_PAGE = 8

class ServiceStates(StatesGroup):
    selecting_type = State()
    filling_form = State()
    waiting_for_photo = State()

def create_pagination_keyboard(total_items: int, current_page: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    total_pages = (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    keyboard = InlineKeyboardBuilder()
    
    row_buttons = []
    
    if current_page > 1:
        row_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{current_page-1}"))
    
    if current_page < total_pages:
        row_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{current_page+1}"))
    
    if row_buttons:
        keyboard.row(*row_buttons)
        
    keyboard.row(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_home"))
    
    return keyboard.as_markup()

def build_service_types_keyboard(page: int = 1) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∏–ø–æ–≤ —É—Å–ª—É–≥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    service_types = db.get_service_types_by_creation_date()
    if not service_types:
        return None
        
    keyboard = InlineKeyboardBuilder()
    
    start_idx = (page - 1) * ITEMS_PER_PAGE
    current_page_types = service_types[start_idx:start_idx + ITEMS_PER_PAGE]
    
    for i in range(0, len(current_page_types), 2):
        row_buttons = []
        for service_type in current_page_types[i:i+2]:
            row_buttons.append(InlineKeyboardButton(
                text=service_type["header"],
                callback_data=f"service_type:{service_type['id']}"
            ))
        keyboard.row(*row_buttons)
    
    pagination = create_pagination_keyboard(len(service_types), page)
    keyboard.attach(InlineKeyboardBuilder.from_markup(pagination))
    
    return keyboard.as_markup()

def create_webapp_form(service_type_id: int, need_enter_phone: Optional[bool] = True) -> Optional[ReplyKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É—Å–ª—É–≥–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    try:    
        service_type = db.get_service_type(service_type_id)
        if not service_type:    
            return None
        
        additional_fields = db.get_service_type_fields(service_type_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL
        base_url = "https://spontaneous-kashata-919d92.netlify.app/create"
        params = [
            f"price=–í–≤–µ–¥–∏—Ç–µ+—Ü–µ–Ω—É",
            f"header={service_type['header'].replace(' ', '+')}"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ URL
        for field in additional_fields:
            if field['field_type'] in ['select', 'multiselect']:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è select/multiselect –ø–æ–ª–µ–π
                field_value = f"{field['name_for_user']}+|+{'+'.join(field['item_for_select'].split(','))}"
                params.append(f"{field['name']}={field_value.replace(' ', '+')}")
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—è
                params.append(f"{field['name']}={field['name_for_user'].replace(' ', '+')}")

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π URL
        full_url = f"{base_url}?{'&'.join(params)}"
        print(full_url)

        keyboard = ReplyKeyboardBuilder()
        keyboard.row(KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=full_url)))
        keyboard.row(KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π üè†"))

        return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=False, is_persistent=True,
                                  input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã")
    except Exception:
        return None

@router.message(F.text.in_(["üìà –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥—É", "/add_service"]))
async def start_post_service(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ª—É–≥–∏"""

    user = db.get_user(telegram_id=str(message.from_user.id))
    if not user or not user[4]:
        await message.answer(
            "‚ùå –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ª—É–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º",
            reply_markup=to_home_keyboard()
        )
        return

    keyboard = build_service_types_keyboard()
    if not keyboard:
        await message.answer(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥",
            reply_markup=to_home_keyboard()
        )
        return

    await state.set_state(ServiceStates.selecting_type)
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:\n"
        "‚ùóÔ∏è –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —É—Å–ª—É–≥–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
        reply_markup=keyboard
    )

@router.callback_query(ServiceStates.selecting_type, lambda c: c.data.startswith('service_type:'))
async def handle_service_type_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏"""
    try:
        service_type_id = int(callback.data.split(':')[1])
        await state.update_data(service_type_id=service_type_id)
        
        user = db.get_user(telegram_id=str(callback.from_user.id))
        keyboard = create_webapp_form(service_type_id, need_enter_phone=not bool(user[3]))
        
        if keyboard:
            await callback.message.delete()
            await callback.message.answer(
                "üñ• –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                reply_markup=keyboard
            )
            await state.set_state(ServiceStates.filling_form)
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã",
                reply_markup=build_service_types_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=build_service_types_keyboard()
        )
    finally:
        await callback.answer()

@router.callback_query(ServiceStates.selecting_type, F.data.startswith('page_'))
async def handle_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        page = int(callback.data.split('_')[1])
        keyboard = build_service_types_keyboard(page)
        if keyboard:
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                reply_markup=build_service_types_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    await callback.answer()

@router.message(ServiceStates.filling_form, lambda message: message.web_app_data and message.web_app_data.button_text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É")
async def process_create_webapp_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    print(message.web_app_data.data)
    try:
        form_data = json.loads(message.web_app_data.data)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω
        user = db.get_user(telegram_id=str(message.from_user.id))
        if not user[3] and not form_data.get('number_phone'):
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            
        form_data['number_phone'] = form_data.get('number_phone') or user[3]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(form_data=form_data)
        await state.set_state(ServiceStates.waiting_for_photo)
        
        await message.answer(
            "üì∏ <b>–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏</b>\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üìé (—Å–∫—Ä–µ–ø–∫–∞) –≤–Ω–∏–∑—É, –æ–∫–æ–ª–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ '–§–æ—Ç–æ' –∏–ª–∏ '–ì–∞–ª–µ—Ä–µ—è'\n" 
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n",
            parse_mode="HTML"
        )
    except json.JSONDecodeError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã",
            reply_markup=to_home_keyboard()
        )
        await state.clear()
    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=to_home_keyboard()
        )
        await state.clear()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
            reply_markup=to_home_keyboard()
        )
        await state.clear()

@router.message(ServiceStates.waiting_for_photo, F.media_group_id)
async def process_service_photo_album(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —É—Å–ª—É–≥–∏"""
    try:
        media_group_id = message.media_group_id
        current_data = await state.get_data()
        
        if current_data.get('media_group_id') == media_group_id:
            photo_ids = current_data.get('photo_ids', [])
        else:
            photo_ids = []
            await state.update_data(media_group_id=media_group_id)
            
        if message.photo:
            photo_ids.append(message.photo[-1].file_id)
            await state.update_data(photo_ids=photo_ids)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            await message.answer(f"‚úÖ –§–æ—Ç–æ {len(photo_ids)}/10 –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            
        await asyncio.sleep(0.5)
        
        if len(photo_ids) >= 10:
            await message.answer("üì∏ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10 —à—Ç)")
            await process_service_data(message, state)
        elif len(photo_ids) >= 1:
            await asyncio.sleep(1)
            final_data = await state.get_data()
            if len(final_data.get('photo_ids', [])) == len(photo_ids):
                await process_service_data(message, state)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–∞: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π",
            reply_markup=to_home_keyboard()
        )
        await state.clear()

@router.message(ServiceStates.waiting_for_photo, F.photo)
async def process_service_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ —É—Å–ª—É–≥–∏"""
    try:
        if not message.media_group_id:
            await state.update_data(photo_ids=[message.photo[-1].file_id])
            await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            await process_service_data(message, state)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ",
            reply_markup=to_home_keyboard()
        )
        await state.clear()

async def process_service_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    try:
        data = await state.get_data()
        form_data = data.get('form_data')
        service_type_id = data.get('service_type_id')
        photo_ids = data.get('photo_ids', [])

        if not all([form_data, service_type_id, photo_ids]):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")

        service_type = db.get_service_type(service_type_id)
        if not service_type:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É—Å–ª—É–≥–∏")

        user = db.get_user(telegram_id=str(message.from_user.id))
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ban_info = db.get_ban_info('user', accused_telegram_id=str(message.from_user.id))
        if ban_info:
            raise ValueError("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—Å–ª—É–≥–∏")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        required_fields = ['city', 'district', 'street', 'price']
        missing_fields = [f for f in required_fields if not form_data.get(f)]
        if missing_fields:
            raise ValueError(f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")


        price = form_data.get('price', 0)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        service_data = {
            "user_id": user[1],
            "service_type_id": service_type_id,
            "title": service_type["header"],
            "photo_id": ','.join(photo_ids),
            "city": form_data['city'].strip(),
            "district": form_data['district'].strip(),
            "street": form_data['street'].strip(),
            "house": form_data.get('house', '–ù–µ —É–∫–∞–∑–∞–Ω–æ').strip(),
            "number_phone": form_data.get('number_phone', user[3] or '').strip(),
            "price": price,
            "custom_fields": {
                k: v.strip() if isinstance(v, str) else v
                for k, v in form_data.items()
                if k not in ['city', 'district', 'street', 'house', 'number_phone', 'price']
                and v is not None
            }
        }

        service_id = db.add_service(**service_data)
        if not service_id:
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏")

        await state.clear()
        await message.answer(
            "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —É—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            reply_markup=seller_keyboard()
        )

    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=to_home_keyboard()
        )
        await state.clear()

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ª—É–≥–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            reply_markup=to_home_keyboard()
        )
        await state.clear()
